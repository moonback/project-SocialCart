-- =============================================
-- SOLUTION IMM√âDIATE POUR CR√âATION DE PROFILS
-- =============================================

-- 1. D√âSACTIVER RLS TEMPORAIREMENT
-- =============================================
ALTER TABLE users DISABLE ROW LEVEL SECURITY;

-- 2. V√âRIFIER QUE RLS EST D√âSACTIV√â
-- =============================================
SELECT '=== √âTAT RLS ===' as info;
SELECT 
    schemaname,
    tablename,
    rowsecurity as rls_enabled
FROM pg_tables 
WHERE tablename = 'users';

-- 3. TESTER L'INSERTION DIRECTE
-- =============================================
SELECT '=== TEST D\'INSERTION ===' as info;
SELECT 'RLS d√©sactiv√© - Les insertions devraient maintenant fonctionner' as status;

-- 4. V√âRIFIER LES DONN√âES EXISTANTES
-- =============================================
SELECT '=== DONN√âES UTILISATEURS ===' as info;
SELECT 
    COUNT(*) as total_users,
    COUNT(*) FILTER (WHERE email IS NOT NULL) as users_with_email,
    COUNT(*) FILTER (WHERE username IS NOT NULL) as users_with_username
FROM users;

-- 5. MESSAGE DE CONFIRMATION
-- =============================================
SELECT 'üö´ RLS D√âSACTIV√â TEMPORAIREMENT !' as status;
SELECT '‚úÖ Les cr√©ations de profils vont maintenant fonctionner' as info1;
SELECT '‚ö†Ô∏è  N\'oubliez pas de r√©activer RLS plus tard' as warning;
SELECT 'üöÄ Testez votre inscription maintenant !' as ready;

-- 6. POUR R√âACTIVER RLS PLUS TARD (COMMENT√â)
-- =============================================
-- ALTER TABLE users ENABLE ROW LEVEL SECURITY;
-- 
-- CREATE POLICY "Users can view their own profile" ON users
-- FOR SELECT USING (auth.uid() = id);
-- 
-- CREATE POLICY "Users can update their own profile" ON users
-- FOR UPDATE USING (auth.uid() = id);
-- 
-- CREATE POLICY "Users can create their own profile" ON users
-- FOR INSERT WITH CHECK (auth.uid() = id);
-- 
-- CREATE POLICY "Anyone can view public user profiles" ON users
-- FOR SELECT USING (true);
